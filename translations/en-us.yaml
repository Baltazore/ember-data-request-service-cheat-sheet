layout:
  application:
    logo-alt-text: 'Ember Octane: the latest edition from Ember.js'
    title: Ember.js Octane vs Classic Cheat Sheet
    description-1: >
      This guide is a cheat sheet for using '<a href="https://emberjs.com/editions/octane" target="_blank" rel="noopener noreferrer">'Ember.js Octane'</a>'.
      It doesn't cover everything, but it should get you started!
      PRs welcome at '<a href="https://github.com/ember-learn/ember-octane-vs-classic-cheat-sheet" target="_blank" rel="noopener noreferrer">'the GitHub repository'</a>'.
    description-2: >
      For in-depth information about the upgrade paths and differences introduced in Octane, see '<a href="https://guides.emberjs.com/release/upgrading/" target="_blank" rel="noopener noreferrer">'The Octane Upgrading Guide'</a>'.


component:
  guide-section:
    section: ยง
    subsection:
      classic: Classic
      octane: Octane


# component-lifecycle:
#   title: Component Lifecycle

#   constructors:
#     title: Using constructor instead of init
#     description: "constructor is a feature of JavaScript Native Classes, not something Ember made up. Use it instead of init. No more this.set! (<a href=\"https://guides.emberjs.com/release/components/component-state-and-actions/\" target=\"_blank\" rel=\"noopener noreferrer\">Visit the Ember Guides to learn more</a>.)"

#   render-modifiers:
#     title: Element Modifiers
#     description:
#       "<p>There are three new element modifiers, \\{\\{did-insert\\}\\}, \\{\\{did-update\\}\\}, and \\{\\{will-destroy\\}\\}, that you may use to replace the classic component lifecycle hooks didInsertElement, willDestroy, and didUpdate.
#       </p>
#       <p>
#         In order for these modifiers to work, you need to install the <a href=\"https://github.com/emberjs/ember-render-modifiers\" target=\"_blank\" rel=\"noopener noreferrer\">@ember/render-modifiers package</a>.
#       </p>"

#   did-insert:
#     title: Use element modifiers instead of didInsertElement
#     description: "Instead of writing a didInsertElement method in the JavaScript file, put the \\{\\{did-insert\\}\\} modifier in your template and say which function to call when that element is rendered. Label that function with the @action decorator. (<a href=\"https://guides.emberjs.com/release/components/template-lifecycle-dom-and-modifiers/\" target=\"_blank\" rel=\"noopener noreferrer\">Visit the Ember Guides to learn more</a>.)"

#   will-destroy:
#     title: Using willDestroy
#     description: "willDestroy is called when the entire component's element will be destroyed, similar to willDestroyElement. You can use it as a method like below, or via a modifier similar to \\{\\{did-insert\\}\\} just above. (<a href=\"https://guides.emberjs.com/release/components/template-lifecycle-dom-and-modifiers/\" target=\"_blank\" rel=\"noopener noreferrer\">Visit the Ember Guides to learn more</a>.)"

# routes:
#   title: Routes

#   model-access:
#     title: Accessing a route's model
#     description: The model used in a route template has always come from an outside context. For this reason, in Octane, refer to it as @model.
