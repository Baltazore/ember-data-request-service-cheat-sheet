layout:
  application:
    logo-alt-text: 'Ember Octane: the latest edition from Ember.js'
    title: Ember.js Octane vs Classic Cheat Sheet
    description-1: >
      This guide is a cheat sheet for using '<a href="https://emberjs.com/editions/octane" target="_blank" rel="noopener noreferrer">'Ember.js Octane'</a>'.
      It doesn't cover everything, but it should get you started!
      PRs welcome at '<a href="https://github.com/ember-learn/ember-octane-vs-classic-cheat-sheet" target="_blank" rel="noopener noreferrer">'the GitHub repository'</a>'.
    description-2: >
      For in-depth information about the upgrade paths and differences introduced in Octane, see '<a href="https://guides.emberjs.com/release/upgrading/" target="_blank" rel="noopener noreferrer">'The Octane Upgrading Guide'</a>'.


component:
  guide-section:
    section: ยง
    subsection:
      classic: Classic
      octane: Octane


# component-properties:
#   title: Component Properties

#   js-boilerplate:
#     title: Component JavaScript Syntax
#     description: "An Octane component imports from the @glimmer package namespace, and it uses Native Class syntax. Glimmer components have different API methods than those on the classic @ember/component. If you aren't familiar with Native Classes, first check out the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\" target=\"_blank\" rel=\"noopener noreferrer\">documentation on MDN</a>. Then, learn more about <a href=\"https://guides.emberjs.com/release/components/component-state-and-actions/\" target=\"_blank\" rel=\"noopener noreferrer\">Octane component classes</a> and the <a href=\"https://api.emberjs.com/ember/release/modules/@glimmer%2Fcomponent\" target=\"_blank\" rel=\"noopener noreferrer\">Component API Documentation</a>."

#   js-properties:
#     title: Declaring a property
#     description: Properties follow normal Native JavaScript Class syntax. Look ma, no commas!

#   ddau:
#     title: Data Down, Actions Up
#     description: "Octane components enforce \"Data Down, Actions Up.\" That means that when data is passed down to a component, the only way to change that data is by using an action that was passed in as well. Said another way, there is no two-way binding of component arguments."

#   get-and-set:
#     title: No more get and set on components
#     description: Octane components do not use this.get or this.set. Access and modify properties directly, the same as you would in a regular JavaScript Class.

#   tracked-vs-cp:
#     title: Use @tracked and getters instead of computed properties
#     description: Label the properties that should be tracked to compute another property,
#       which is a getter.

#   computed-decorator:
#     title: Computed decorators
#     description: For Octane, it is recommended to refactor computed properties to use tracked instead. However, there is a @computed decorator available as well.


# actions:
#   title: Actions

#   actions:
#     title: Use @action, on, and fn instead of action
#     description: "Use the @action decorator in your JavaScript to indicate functions that you want to be able to use in a template. Use those functions in the template with \"on,\" and if you need to pass an argument to the function, use \"fn\" too. (<a href=\"https://guides.emberjs.com/release/components/component-state-and-actions/#toc_html-modifiers-and-actions\" target=\"_blank\" rel=\"noopener noreferrer\">Visit the Ember Guides to learn more</a>.)"

#   template-arguments-default:
#     title: Specifying a default value for an argument
#     description: Because arguments are read only, their values cannot be changed so no default value can be set. To have a default-value-like experience, native getters may be used.

#   mixins:
#     title: Mixins
#     description: You cannot use mixins on anything that uses Native Class syntax (such as components that import from @glimmer/component). The replacement strategy depends on your use case. If your app depends on an addon that uses Mixins, it may be best to continue using classic components until an alternative is ready.
#     octaneDescription: "See <a href=\"https://www.pzuraq.com/do-you-need-ember-object/\" target=\"_blank\" rel=\"noopener noreferrer\">Do you need Ember Object?</a> for Mixin alternatives, such as utility functions, services, delegates, and class decorators."


# component-lifecycle:
#   title: Component Lifecycle

#   constructors:
#     title: Using constructor instead of init
#     description: "constructor is a feature of JavaScript Native Classes, not something Ember made up. Use it instead of init. No more this.set! (<a href=\"https://guides.emberjs.com/release/components/component-state-and-actions/\" target=\"_blank\" rel=\"noopener noreferrer\">Visit the Ember Guides to learn more</a>.)"

#   render-modifiers:
#     title: Element Modifiers
#     description:
#       "<p>There are three new element modifiers, \\{\\{did-insert\\}\\}, \\{\\{did-update\\}\\}, and \\{\\{will-destroy\\}\\}, that you may use to replace the classic component lifecycle hooks didInsertElement, willDestroy, and didUpdate.
#       </p>
#       <p>
#         In order for these modifiers to work, you need to install the <a href=\"https://github.com/emberjs/ember-render-modifiers\" target=\"_blank\" rel=\"noopener noreferrer\">@ember/render-modifiers package</a>.
#       </p>"

#   did-insert:
#     title: Use element modifiers instead of didInsertElement
#     description: "Instead of writing a didInsertElement method in the JavaScript file, put the \\{\\{did-insert\\}\\} modifier in your template and say which function to call when that element is rendered. Label that function with the @action decorator. (<a href=\"https://guides.emberjs.com/release/components/template-lifecycle-dom-and-modifiers/\" target=\"_blank\" rel=\"noopener noreferrer\">Visit the Ember Guides to learn more</a>.)"

#   will-destroy:
#     title: Using willDestroy
#     description: "willDestroy is called when the entire component's element will be destroyed, similar to willDestroyElement. You can use it as a method like below, or via a modifier similar to \\{\\{did-insert\\}\\} just above. (<a href=\"https://guides.emberjs.com/release/components/template-lifecycle-dom-and-modifiers/\" target=\"_blank\" rel=\"noopener noreferrer\">Visit the Ember Guides to learn more</a>.)"

# routes:
#   title: Routes

#   model-access:
#     title: Accessing a route's model
#     description: The model used in a route template has always come from an outside context. For this reason, in Octane, refer to it as @model.
